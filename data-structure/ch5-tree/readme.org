#+OPTIONS: toc:t
* thread binary tree
** data structure
Each leave node has two null pointers. try to make use of these null pointer. Let

- the left child ptr points to the inorder predecessor ptr.
- the right child ptr points to the inorder successor ptr.

It makes it easy to get the inorder travel in linear time, little faster than the
recursive method. Fit for the stack lack suitation.

#+BEGIN_SRC c++
  typedef struct threaded_tree* threaded_pointer;

  // tree with head node, whose right_child points to the root node or null for an empty tree.
  // first node's inorder predecessor and last node's inorder successor point to the head node.
  typedef struct threaded_tree{
      short int left_thread;
      short int right_thread;
      threaded_pointer left_child;
      threaded_pointer right_child;
      char data;
  };


  // find the inorder successor
  threaded_pointer insucc(threaded_pointer root){
      threaded_pointer tmp = root->right_child;
      if (!root->right_thread)
          while(!tmp->left_thread)
              tmp = tmp->left_child;
      return tmp;
  }

  // inorder travel
  void tinorder(threaded_pointer head){
      threaded_pointer tmp = head;
      while(1){
          tmp = insucc(tmp);
          if (tmp == head) break;
          // do something
          print("%c\t", tmp->data);
      }
  }
#+END_SRC

** right insert into a threaded tree
- set *child->left_thread* to be *true*
- set *child->right_thread* = *parent->right_thread*
- turn *parent->right_thread* to be *false*
- set *child->left_child* pointing to the *parent*
- set *child->right_child* pointing to the *parent->right_child*
- set *parent->right_child* pointing to the *child*

#+BEGIN_SRC c++
  void right_insert(thread_pointer parent, thread_pointer child){
      child->left_thread = 1;
      child->left_child = parent;
      child->right_thread = parent->right_thread;
      child->right_child = parent->right_child;
      parent->right_thread = 0;
      parent->right_child = child;
      if(!child->right_thread){
          thread_pointer tmp = insucc(child);
          tmp -> left_child = child;
      }
  }
#+END_SRC

** left insert into a threaded tree
- set *child->right_thread* to be *true*
- set *child->left_thread* = *parent->left_thread*
- set *child->right_child* = *parent*
- set *child->left_child* = *parent->left_child*
- set *parent->left_child* = *child*
#+BEGIN_SRC c++
  void left_insert(thread_pointer parent, thread_pointer child){
      child->right_thread = 1;
      child->right_child = parent;
      child->left_thread = parent->left_thread;
      child->left_child = parent->left_child;
      parent->left_child = child;
  }
#+END_SRC

** preorder travel and postorder travel for threaded binary tree
*** postorder
    maybe need to add child-to-parent ptr.
*** preorder 
preorder successor
#+BEGIN_SRC c++
  thread_pointer presucc(thread_pointer root){
      if(!root->left_thread)
          return root->left_child;
      if(!root->right_thread)
          return root->right_child;
      thread_pointer tmp = root->right_child;
      while(tmp->right_thread)
          tmp = tmp->right_child;
      return tmp->right_child;
  }
#+END_SRC
preorder travel
#+BEGIN_SRC c++
  void preorder(thread_pointer head){
      thread_pointer tmp = head;
      while(1){
          tmp = presucc(tmp);
          if(tmp == head) break;
          // do something
          printf("%c\t", tmp->data);
      }
  }
#+END_SRC

* heap
** data structure
#+BEGIN_SRC c++
  typedef struct {
      int key;
  } element;

  #define MAX_SIZE 200
  #define HEAP_FULL(n) (n == MAX_SIZE-1)
  #define HEAP_EMPTY(n) (!n)

  element haap[MAX_SIZE];
  int n = 0;
#+END_SRC

** insert
#+BEGIN_SRC c++
  void insert_max_heap(element item, int *n){
      if(HEAP_FULL(*n)){
          fprintf(stderr, "heap is full\n");
          exit(1);
      }
      int i = ++(*n);
      while(i<1 && heap[i/2].key > item.key){
          heap[i] = heap[i/2];
          i /= 2;
      }
      heap[i] = item;
  }
#+END_SRC

** delete
#+BEGIN_SRC c++
  element delete_max_heap(int *n){
      if(HEAP_EMPTY(*n)){
          fprintf(stderr, "heap is empty\n");
          exit(1);
      }
      int parent = 1, child = 2;
      element item = heap[1];
      element tmp = heap[(*n)--];
      while(child <= *n){
          if(child < n && heap[child+1].key > heap[child].key)
              ++child;
          if(tmp.key >= heap[child].key)
              break;
          heap[parent] = heap[child];
          parent = child;
          child = child * 2;
      }
      heap[parent] = tmp;
      return item;
 }
#+END_SRC

* binary search tree
- key is all different
- *left_child* < *root* < *right_child*
- left subtree and right subtree are also search tree.
** search
#+BEGIN_SRC c++ 
  tree_pointer search(tree_pointer root, int key){
      // if key is in the tree, return the ptr pointing to the node, else return null;
      if(!root)
          return NULL;
      else if(root->key == key)
          return root;
      else if(key < root->key)
          return search(root->left_child, key);
      return search(root->right_child, key);
  }
#+END_SRC
or iteration version
#+BEGIN_SRC c++
  tree_pointer search2(tree_pointer root, int key){
      while(root){
          if(root.key == key)
              return root;
          else if(key < root.key)
              root = root->left_child;
          else
              root = root->right_child;
      }
      return NULL;
  }
#+END_SRC
** insert
#+BEGIN_SRC c++
  tree_pointer search3(tree_pointer root, int key){
      // return NULL if find, else return ptr to the final node.
      tree_pointer tmp = NULL;
      while(root){
          tmp = root;
          if(root.key == key)
              return NULL;
          else if(key < root.key){
              root = root->left_child;
          }
          else
              root = root->right_child;
      }
      return NULL;
  }

  void insert_node(tree_pointer root, int item){
      tree_pointer tmp = search3(root, item);
      if(tmp){
          tree_pointer ptr = (tree_pointer)malloc(sizeof(tree));
          ptr->key = item;
          ptr->left_child = ptr->right_child = NULL;
          if(root){
              if(item < tmp.key)
                  tmp.left_child = ptr;
              else
                  tmp.right_child = ptr
          }
          else
              root = ptr;
      }
  }
#+END_SRC

** delete
- if leaf, remove directly.
- only one son, replace directly.
- two sons, replace with biggest in left subtree or least in right subtree and do recursion

replace with biggest in left subtree for example.
#+BEGIN_SRC c++
  void _delete_left(tree_pointer node, tree_pointer parent){
      if(!node->left_child && !node->right_child){
          if(parent->left_child == node)
              parent->left_child = NULL;
          else if(parent->right == node)
              parent->right_child = NULL;
          free(node);
          node = NULL;
      }
      // only one son, replace directly.
      else if(!node->left_child){
          if(parent->left_child == node)
              parent->left_child = node->right_child;
          else if(parent->right == node)
              parent->right_child = node->right_child;
          free(node);
          node = NULL;
      }
      else if(!node->right_child){
          if(parent->left_child == node)
              parent->left_child = node->left_child;
          else if(parent->right == node)
              parent->right_child = node->left_child;
          free(node);
          node = NULL;
      }
      // two sons, replace with biggest in left subtree or least in right subtree and do recursion
      tree_pointer tmp = node->left_child, tmparent=node;
      while(tmp->right_child){
          tmparent = tmp;
          tmp = tmp->right_child;
      }
      node->key = tmp->key;
      _delete_left(tmp, tmparent);
      free(tmp);
  }


  void delete_left(tree_pointer root, int item){
      tree_pointer node = search2(root, item);
      tree_pointer parent = search3(root, item);
      // 1 free directly.
      _delete_left(node, parent);
  }
#+END_SRC

